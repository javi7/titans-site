<krpano><control mousetype="drag2d" /><action name="setup">    indexoftxt(dashIndex, get(preview.url), -1_Panorama);    sub(startSearch, dashIndex, 4);    indexoftxt(slashIndex, get(preview.url), /, get(startSearch));    add(slashIndex, 1);    sub(panoNumberLength, get(dashIndex), get(slashIndex));    subtxt(panoNumber, get(preview.url), get(slashIndex), get(panoNumberLength));    initializeVars();    set(initialFov, get(view.fov));  </action><action name="initializeVars">    set(initialHlookat, get(view.hlookat));    set(initialVlookat, get(view.vlookat));    js(setCampVariables(get(panoNumber)););  </action><action name="finishInitializingVars">    if(climbing == false AND descending == false, showControls(), hideControls());    delayedcall(keepClimbing, 1,       if(climbing == true,        wait(LOAD);        loadNextPano(true, false);,        if(descending == true,          wait(LOAD);          loadPrevPano(false, true);        );      );    );    wait(LOAD);    delayedcall(1,if((panoNumber == prevCamp OR panoNumber == lastPano) AND climbing == false, js(contextMap.pause(););startSpinning();));    add(nextPano, panoNumber, 1);      </action><action name="preloadWrapper">    if(climbing == true AND panoNumber AND panoNumber LT lastPano,       if(nextPano AND nextPano != "null", preload(get(nextPano), low-res, get(nextImgCacheBuster)));      if(panoNumber AND panoNumber != "null", preload(get(panoNumber), hi-res, get(imgCacheBuster))),      if(panoNumber LT lastPano,        if(nextPano AND nextPano != "null", preload(get(nextPano), low-res, get(nextImgCacheBuster)));        if(nextPano AND nextPano != "null", preload(get(nextPano), hi-res, get(nextImgCacheBuster)));      )    );  </action><action name="resetView">    removelayer(climbButton);    if(descending == true, lookat(get(view.hlookatdesc), get(initialVlookat)), lookat(get(view.hlookatasc), get(initialVlookat)));  </action><action name="loadNextPano">    add(targetPano, get(panoNumber), 1);    if(targetPano LE lastPano, loadPanoWrapper(get(targetPano), %1, %2, get(nextImgCacheBuster)));  </action><action name="loadPanoWrapper">    resetView();    set(loadClimbing, %2);    set(loadDescending, %3);    if(%1 == nextCamp, set(loadClimbing, false));    set(xmlFile, '%1-1_Panorama');    if(%3 == true, txtadd(xmlFile, get(xmlFile), '_desc.xml'), txtadd(xmlFile, get(xmlFile), '.xml'));    if(%4, txtadd(xmlFile, get(xmlFile), '?houses=', %4));    txtadd(prefix, 'http://d39rd677qckrt3.cloudfront.net/mountains/', get(mountain));    if(loadClimbing == true OR %3 == true, txtadd(xmlFile, get(prefix), /low-res/xml/, get(xmlFile)), txtadd(xmlFile, get(prefix), /hi-res/xml/, get(xmlFile)));    txtadd(loadPanoCall, 'loadpano(', get(xmlFile), ',staticsLoaded=true&amp;panoNumber=%1&amp;climbing=', get(loadClimbing),'&amp;descending=%3, null, BLEND(0.5));');    trace(loadPanoCall);    call(loadPanoCall);  </action><action name="loadPrevPano">    sub(targetPano, get(panoNumber), 1);    loadPanoWrapper(get(targetPano), %1, %2, get(prevImgCacheBuster));  </action><action name="spacebar">    if(climbing == true, pause(false), loadNextPano(true, false));  </action><action name="pause">    if(climbing == true OR %1 == true,       stopdelayedcall(keepClimbing);      set(climbing, false);      set(descending, false);      if(%1 == true, delayedcall(1,startSpinning()), loadPanoWrapper(get(panoNumber), false, false, get(imgCacheBuster)));    );  </action><action name="startSpinning">    sub(newhlookat, get(view.hlookat), 360);    lookto(get(newhlookat),get(view.vlookat),get(view.fov),linear(5), false, true);  </action><action name="preload">    trace(preload %1 %2);    addplugin(pre_%1_r_%2);    addplugin(pre_%1_d_%2);    addplugin(pre_%1_b_%2);    addplugin(pre_%1_u_%2);    addplugin(pre_%1_f_%2);    addplugin(pre_%1_l_%2);    set(plugin[pre_%1_r_%2].visible, false);    set(plugin[pre_%1_d_%2].visible, false);    set(plugin[pre_%1_b_%2].visible, false);    set(plugin[pre_%1_u_%2].visible, false);    set(plugin[pre_%1_f_%2].visible, false);    set(plugin[pre_%1_l_%2].visible, false);       set(url_r, /%2/%1-1_Panorama.tiles/mres_r/l1/1/l1_r_1_1.jpg);    txtadd(url_r, 'http://d39rd677qckrt3.cloudfront.net/mountains/', get(mountain), get(url_r));    if(%3, txtadd(url_r, get(url_r), '?mouses=', %3));    set(url_d, /%2/%1-1_Panorama.tiles/mres_d/l1/1/l1_d_1_1.jpg);    txtadd(url_d, 'http://d39rd677qckrt3.cloudfront.net/mountains/', get(mountain), get(url_d));    if(%3, txtadd(url_d, get(url_d), '?mouses=', %3));    set(url_b, /%2/%1-1_Panorama.tiles/mres_b/l1/1/l1_b_1_1.jpg);    txtadd(url_b, 'http://d39rd677qckrt3.cloudfront.net/mountains/', get(mountain), get(url_b));    if(%3, txtadd(url_b, get(url_b), '?mouses=', %3));    set(url_u, /%2/%1-1_Panorama.tiles/mres_u/l1/1/l1_u_1_1.jpg);    txtadd(url_u, 'http://d39rd677qckrt3.cloudfront.net/mountains/', get(mountain), get(url_u));    if(%3, txtadd(url_u, get(url_u), '?mouses=', %3));    set(url_f, /%2/%1-1_Panorama.tiles/mres_f/l1/1/l1_f_1_1.jpg);    txtadd(url_f, 'http://d39rd677qckrt3.cloudfront.net/mountains/', get(mountain), get(url_f));    if(%3, txtadd(url_f, get(url_f), '?mouses=', %3));    set(url_l, /%2/%1-1_Panorama.tiles/mres_l/l1/1/l1_l_1_1.jpg);    txtadd(url_l, 'http://d39rd677qckrt3.cloudfront.net/mountains/', get(mountain), get(url_l));    if(%3, txtadd(url_l, get(url_l), '?mouses=', %3));    set(plugin[pre_%1_r_%2].onloaded, trace('preloaded ', get(url_r));removeplugin(pre_%1_r_%2) );    set(plugin[pre_%1_d_%2].onloaded, trace('preloaded ', get(url_d));removeplugin(pre_%1_d_%2) );    set(plugin[pre_%1_b_%2].onloaded, trace('preloaded ', get(url_b));removeplugin(pre_%1_b_%2) );    set(plugin[pre_%1_u_%2].onloaded, trace('preloaded ', get(url_u));removeplugin(pre_%1_u_%2) );    set(plugin[pre_%1_f_%2].onloaded, trace('preloaded ', get(url_f));removeplugin(pre_%1_f_%2) );    set(plugin[pre_%1_l_%2].onloaded, trace('preloaded ', get(url_l));removeplugin(pre_%1_l_%2) );    set(plugin[pre_%1_r_%2].url, get(url_r));    set(plugin[pre_%1_d_%2].url, get(url_d));    set(plugin[pre_%1_b_%2].url, get(url_b));    set(plugin[pre_%1_u_%2].url, get(url_u));    set(plugin[pre_%1_f_%2].url, get(url_f));    set(plugin[pre_%1_l_%2].url, get(url_l));  </action><style     name="hs-animate"     url="/fullClimb/images/peak.gif"         zorder="99"         scale="0.1"    startv="-2.3985087372234783"     align="center"            framewidth="128"    frameheight="128"    frame="0"     lastframe="5"    handcursor="false"    onloaded="hs_animate()"  /><action name="hs_animate">     add(maxv, startv, 0.5);    if(direction==down, bounce_down(), bounce_up());    delayedcall(0.1, if(loaded, hs_animate() ) );  </action><action name="bounce_down">    sub(atv, 0.05);    sub(currentstep, 1);    if(currentstep==0, set(direction, up));  </action><action name="bounce_up">    add(atv, 0.05);    add(currentstep, 1);    if(currentstep==10, set(direction, down));  </action><action name="showControls">    addlayer(back);    set(layer[back].url, http://d39rd677qckrt3.cloudfront.net/images/back-button.png);    set(layer[back].x, 30);    set(layer[back].y, 30);    if(mobileView, set(layer[back].scale, 1), set(layer[back].scale, 0.6));    set(layer[back].onhover, layer[back].loadstyle(opaque));    set(layer[back].onout, layer[back].loadstyle(transparent));    set(layer[back].onclick, openurl(/#climb,_self));    layer[back].loadstyle(transparent);    addlayer(zoom);    if(mobileView, set(layer[zoom].visible, false));    set(layer[zoom].type, container);    set(layer[zoom].height, 120);    set(layer[zoom].width, 52);    set(layer[zoom].align, bottomright);    set(layer[zoom].x, 30);    set(layer[zoom].y, 30);    addlayer(zoomin);    set(layer[zoomin].url, http://d39rd677qckrt3.cloudfront.net/images/round-buttons.png);    set(layer[zoomin].align, top);    if(mobileView, set(layer[zoomin].scale, 1.2), set(layer[zoomin].scale, 0.65));    set(layer[zoomin].onclick, zoomIn());    set(layer[zoomin].keep, false);    set(layer[zoomin].parent, layer[zoom]);    set(layer[zoomin].crop, 98|2|87|87);    set(layer[zoomin].onhover,       layer[zoomin].loadstyle(opaque);          );    set(layer[zoomin].onout,       layer[zoomin].loadstyle(transparent);          );    layer[zoomin].loadstyle(transparent);    addlayer(zoomout);    set(layer[zoomout].url, http://d39rd677qckrt3.cloudfront.net/images/round-buttons.png);    set(layer[zoomout].align, bottom);    if(mobileView, set(layer[zoomout].scale, 1.2), set(layer[zoomout].scale, 0.65));    set(layer[zoomout].onclick, zoomOut());    set(layer[zoomout].keep, false);    set(layer[zoomout].parent, layer[zoom]);    set(layer[zoomout].crop, 98|97|87|87);    set(layer[zoomout].onhover,       layer[zoomout].loadstyle(opaque);          );    set(layer[zoomout].onout,       layer[zoomout].loadstyle(transparent);          );    layer[zoomout].loadstyle(transparent);    addlayer(nextPrevControls);    set(layer[nextPrevControls].type, container);    if(mobileView, set(layer[nextPrevControls].height, 205),set(layer[nextPrevControls].height, 120));    set(layer[nextPrevControls].width, 52);    set(layer[nextPrevControls].align, bottomright);    if(mobileView, set(layer[nextPrevControls].x, 50), set(layer[nextPrevControls].x, 100));    set(layer[nextPrevControls].y, 30);    addlayer(nextPic);    set(layer[nextPic].url, http://d39rd677qckrt3.cloudfront.net/images/round-buttons.png);    set(layer[nextPic].align, top);    if(mobileView, set(layer[nextPic].scale, 1.2), set(layer[nextPic].scale, 0.65));    set(layer[nextPic].onclick, loadNextPano(false, false));    set(layer[nextPic].keep, false);    set(layer[nextPic].parent, layer[nextPrevControls]);    set(layer[nextPic].crop, 3|2|87|87);    set(layer[nextPic].onhover,       layer[nextPic].loadstyle(opaque);          );    set(layer[nextPic].onout,       layer[nextPic].loadstyle(transparent);          );    layer[nextPic].loadstyle(transparent);    if(panoNumber==lastPano, set(layer[nextPic].visible, false), set(layer[nextPic].visible, true));    addlayer(prevPic);    set(layer[prevPic].url, http://d39rd677qckrt3.cloudfront.net/images/round-buttons.png);    set(layer[prevPic].align, bottom);    if(mobileView, set(layer[prevPic].scale, 1.2), set(layer[prevPic].scale, 0.65));    set(layer[prevPic].onclick, loadPrevPano(false, false));    set(layer[prevPic].keep, false);    set(layer[prevPic].parent, layer[nextPrevControls]);    set(layer[prevPic].crop, 3|97|87|87);    set(layer[prevPic].onhover,       layer[prevPic].loadstyle(opaque);          );    set(layer[prevPic].onout,       layer[prevPic].loadstyle(transparent);          );    layer[prevPic].loadstyle(transparent);  </action><action name="hideControls">    removelayer(nextPrevControls);    removelayer(zoom);  </action><style     name="transparent"    alpha="0.3"  /><style    name="opaque"    alpha="1"  /><action name="zoomIn">    sub(newfov, get(view.fov), 30);    zoomto(get(newfov));  </action><action name="zoomOut">    add(newfov, get(view.fov), 30);    zoomto(get(newfov));  </action><textstyle name="tooltip"    showtime="2"  /><textstyle name="invisible"    showtime="0"  /><action name="hideUtilities">    removelayer(copy);    removelayer(next);  </action><action name="showCoordinates">    txtadd(coords, 'horizontal - ', get(view.hlookat), [br], 'vertical - ', get(view.vlookat), [br], 'fov - ', get(view.fov));    showtext(get(coords), coordinates);  </action><action name="getMousePosition">    screentosphere(mouse.x, mouse.y, x, y);    js(copyCursorPos(get(x), get(y), get(panoNumber)));  </action><action name="getOrientation">    js(copyToClipboard(get(panoNumber), get(view.hlookat), get(view.vlookat)));  </action><textstyle  name="coordinates"              showtime="60"  /><textstyle name="DEFAULT" /><action name="showtext_install" autorun="preinit">				set(showtext, action(showtext_xml,%%1,%%2) );				set(showtext_style, DEFAULT);		set(showtext_prevstyle, null);		set(showtext_text, '');		set(showtext_prevtext, '');		set(showtext_timeout, 0.1);		set(showtext_fadeout, 0.0);		set(showtext_clipping, false);	</action><action name="showtext_xml">		set(showtext_style, DEFAULT);		if(%2 != null, ifnot(textstyle[%2], trace('textstyle "%2" not found'); , set(showtext_style,%2)); );		set(showtext_text, %1);		if(showtext_text != showtext_prevtext,			copy(showtext_prevtext, showtext_text);			showtext_createnewtext();		  ,			delayedcall(showtext_timer, get(showtext_timeout), showtext_hide() );		  );	</action><action name="showtext_createnewtext">				stopdelayedcall(showtext_mouseupdates);		stoptween(layer[showtext_tf].alpha);				if(showtext_style != showtext_prevstyle,			copy(showtext_prevstyle, showtext_style);			removelayer(showtext_tf);		  );				addlayer(showtext_tf);				copy(tf, layer[showtext_tf]);		copy(ts, textstyle[get(showtext_style)]);				if(ts.origin  !== null, copy(ts_origin,  ts.origin),  set(ts_origin, 'cursor'));		if(ts.edge    !== null, copy(ts_edge,    ts.edge),    set(ts_edge, 'bottom'));		if(ts.xoffset !== null, copy(ts_xoffset, ts.xoffset), set(ts_xoffset, 0));		if(ts.yoffset !== null, copy(ts_yoffset, ts.yoffset), set(ts_yoffset, -3));				if(ts_origin == 'cursor',			set(tf.align, 'lefttop');			showtext_movetomouse();		  ,			copy(tf.align, ts_origin);		  );		copy(tf.edge, ts_edge);		copy(tf.ox, ts_xoffset);		copy(tf.oy, ts_yoffset);				if(ts.font      !== null, copy(ts_font,      ts.font),      set(ts_font, 'Times'));		if(ts.fontsize  !== null, copy(ts_fontsize,  ts.fontsize),  set(ts_fontsize, 12.0));		if(ts.bold      !== null, copy(ts_bold,      ts.bold),      set(ts_bold, true));		if(ts.italic    !== null, copy(ts_italic,    ts.italic),    set(ts_italic, false));		if(ts.textcolor !== null, copy(ts_textcolor, ts.textcolor), set(ts_textcolor, 0x000000));		if(ts.textalign !== null, copy(ts_textalign, ts.textalign), set(ts_textalign, 'left'));				set(tf_css, '');		tohex(ts_textcolor, '#', 6);		txtadd(tf_css, 'font-family:',get(ts_font),'; font-size:',get(ts_fontsize),'px; color:',get(ts_textcolor),'; ');		if(ts_textalign != 'none', txtadd(tf_css, get(tf_css), 'text-align:',get(ts_textalign),'; '));		if(ts_bold,   txtadd(tf_css, 'font-weight:bold; '));		if(ts_italic, txtadd(tf_css, 'font-style:italic; '));		if(ts.css !== null, txtadd(tf_css, get(ts.css)));		copy(tf.css, tf_css);				if(ts.width   !== null, copy(tf.width,   ts.width));		if(ts.height  !== null, copy(tf.height,  ts.height));		if(ts.vcenter !== null, copy(tf.vcenter, ts.vcenter));		if(ts.padding !== null, copy(tf.padding, ts.padding), set(tf.padding,1));				if(ts.background      !== null, copy(tf.background,      ts.background));		if(ts.backgroundcolor !== null, copy(tf.backgroundcolor, ts.backgroundcolor));		if(ts.backgroundalpha !== null, copy(tf.backgroundalpha, ts.backgroundalpha));		if(ts.border          !== null, copy(tf.border,          ts.border), set(tf.border,true));		if(ts.bordercolor     !== null, copy(tf.bordercolor,     ts.bordercolor));		if(ts.borderalpha     !== null, copy(tf.borderalpha,     ts.borderalpha));		if(ts.borderwidth     !== null, copy(tf.borderwidth,     ts.borderwidth));		if(ts.roundedge       !== null, copy(tf.roundedge,       ts.roundedge));		if(ts.shadow          !== null, copy(tf.shadow,          ts.shadow));		if(ts.shadowrange     !== null, copy(tf.shadowrange,     ts.shadowrange));		if(ts.shadowangle     !== null, copy(tf.shadowangle,     ts.shadowangle));		if(ts.shadowcolor     !== null, copy(tf.shadowcolor,     ts.shadowcolor));		if(ts.shadowalpha     !== null, copy(tf.shadowalpha,     ts.shadowalpha));		if(ts.textshadow      !== null, copy(tf.textshadow,      ts.textshadow));		if(ts.textshadowrange !== null, copy(tf.textshadowrange, ts.textshadowrange));		if(ts.textshadowangle !== null, copy(tf.textshadowangle, ts.textshadowangle));		if(ts.textshadowcolor !== null, copy(tf.textshadowcolor, ts.textshadowcolor));		if(ts.textshadowalpha !== null, copy(tf.textshadowalpha, ts.textshadowalpha));				if(ts.alpha      !== null, copy(ts_alpha,      ts.alpha),      set(ts_alpha, 1.0));		if(ts.showtime   !== null, copy(ts_showtime,   ts.showtime),   set(ts_showtime, 0.1));		if(ts.fadetime   !== null, copy(ts_fadetime,   ts.fadetime),   set(ts_fadetime, 0.0));		if(ts.fadeintime !== null, copy(ts_fadeintime, ts.fadeintime), set(ts_fadeintime, 0.0));		copy(showtext_timeout, ts_showtime);		copy(showtext_fadeout, ts_fadetime);		if(ts_fadeintime GT 0,			set(tf.alpha, 0.0);			tween(layer[showtext_tf].alpha, get(ts_alpha), get(ts_fadeintime), linear);		  ,			copy(tf.alpha, ts_alpha);		  );		if(ts.noclip !== null, copy(showtext_clipping,ts.noclip), set(showtext_clipping, true));				if(showtext_clipping,			set(tf.onloaded,    showtext_do_clipping() );			set(tf.onautosized, showtext_do_clipping() );		  );				if(ts.embeddedfonts !== null, copy(tf.embeddedfonts, ts.embeddedfonts));		if(ts.effect        !== null, copy(tf.effect,        ts.effect));		if(ts.blendmode     !== null, copy(tf.blendmode,     ts.blendmode));				copy(tf.html, showtext_text);		set(tf.enabled, false);		set(tf.zorder, 999999);		if(ts.parent, copy(tf.parent, ts.parent) );		set(tf.url, '%SWFPATH%/plugins/textfield.swf');						delete(ts);		delete(tf);				delayedcall(showtext_timer, get(showtext_timeout), showtext_hide() );	</action><action name="showtext_do_clipping">		if(showtext_clipping,			layer[showtext_tf].updatepos();			copy(tf_px, layer[showtext_tf].pixelx);			copy(tf_py, layer[showtext_tf].pixely);			if(tf_px LT 0,				sub(layer[showtext_tf].x, tf_px);			  ,				add(tf_rightedge, tf_px, layer[showtext_tf].pixelwidth);				if(tf_rightedge GE stagewidth, sub(tf_rightedge,stagewidth); sub(layer[showtext_tf].x,tf_rightedge); );			  );			if(tf_py LT 0,				sub(layer[showtext_tf].y,  tf_py);			  ,				add(tf_bottomedge, tf_py, layer[showtext_tf].pixelheight);				if(tf_bottomedge GE stageheight, sub(tf_bottomedge,stageheight); sub(layer[showtext_tf].y,tf_bottomedge); );			  );		  );	</action><action name="showtext_movetomouse">		copy(layer[showtext_tf].x, mouse.stagex);		copy(layer[showtext_tf].y, mouse.stagey);		showtext_do_clipping();		delayedcall(showtext_mouseupdates, 0, showtext_movetomouse() );	</action><action name="showtext_hide">		if(layer[showtext_tf],			tween(layer[showtext_tf].alpha, 0.0, get(showtext_fadeout), linear,					stopdelayedcall(showtext_mouseupdates);					removelayer(showtext_tf);					set(showtext_text, '');					set(showtext_prevtext, '');				);		  );	</action></krpano>